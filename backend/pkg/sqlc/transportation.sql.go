// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transportation.sql

package sqlc

import (
	"context"

	"cloud.google.com/go/civil"
)

const deleteTransportationByID = `-- name: DeleteTransportationByID :exec
DELETE
FROM transportation
WHERE trip_id = $1
  AND transportation.id = $2
`

type DeleteTransportationByIDParams struct {
	TripID int32
	ID     int32
}

func (q *Queries) DeleteTransportationByID(ctx context.Context, arg DeleteTransportationByIDParams) error {
	_, err := q.db.Exec(ctx, deleteTransportationByID, arg.TripID, arg.ID)
	return err
}

const getAllGeoJson = `-- name: GetAllGeoJson :many
SELECT transportation_geojson.geojson
FROM transportation_geojson
         JOIN transportation on transportation_geojson.transportation_id = transportation.id
WHERE transportation.trip_id = $1
`

func (q *Queries) GetAllGeoJson(ctx context.Context, tripID int32) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getAllGeoJson, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var geojson []byte
		if err := rows.Scan(&geojson); err != nil {
			return nil, err
		}
		items = append(items, geojson)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTransportation = `-- name: GetAllTransportation :many
SELECT transportation.id, transportation.trip_id, transportation.type, transportation.origin_id, transportation.destination_id, transportation.departure_time, transportation.arrival_time, transportation.price,
       origin.id, origin.latitude, origin.longitude,
       destination.id, destination.latitude, destination.longitude
FROM transportation
         JOIN location origin on transportation.origin_id = origin.id
         JOIN location destination on transportation.destination_id = destination.id
WHERE transportation.trip_id = $1
`

type GetAllTransportationRow struct {
	Transportation Transportation
	Location       Location
	Location_2     Location
}

func (q *Queries) GetAllTransportation(ctx context.Context, tripID int32) ([]GetAllTransportationRow, error) {
	rows, err := q.db.Query(ctx, getAllTransportation, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTransportationRow{}
	for rows.Next() {
		var i GetAllTransportationRow
		if err := rows.Scan(
			&i.Transportation.ID,
			&i.Transportation.TripID,
			&i.Transportation.Type,
			&i.Transportation.OriginID,
			&i.Transportation.DestinationID,
			&i.Transportation.DepartureTime,
			&i.Transportation.ArrivalTime,
			&i.Transportation.Price,
			&i.Location.ID,
			&i.Location.Latitude,
			&i.Location.Longitude,
			&i.Location_2.ID,
			&i.Location_2.Latitude,
			&i.Location_2.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransportationByID = `-- name: GetTransportationByID :one
SELECT transportation.id, transportation.trip_id, transportation.type, transportation.origin_id, transportation.destination_id, transportation.departure_time, transportation.arrival_time, transportation.price,
       origin.id, origin.latitude, origin.longitude,
       destination.id, destination.latitude, destination.longitude
FROM transportation
         JOIN location origin on transportation.origin_id = origin.id
         JOIN location destination on transportation.destination_id = destination.id
WHERE transportation.trip_id = $1
  AND transportation.id = $2
`

type GetTransportationByIDParams struct {
	TripID int32
	ID     int32
}

type GetTransportationByIDRow struct {
	Transportation Transportation
	Location       Location
	Location_2     Location
}

func (q *Queries) GetTransportationByID(ctx context.Context, arg GetTransportationByIDParams) (GetTransportationByIDRow, error) {
	row := q.db.QueryRow(ctx, getTransportationByID, arg.TripID, arg.ID)
	var i GetTransportationByIDRow
	err := row.Scan(
		&i.Transportation.ID,
		&i.Transportation.TripID,
		&i.Transportation.Type,
		&i.Transportation.OriginID,
		&i.Transportation.DestinationID,
		&i.Transportation.DepartureTime,
		&i.Transportation.ArrivalTime,
		&i.Transportation.Price,
		&i.Location.ID,
		&i.Location.Latitude,
		&i.Location.Longitude,
		&i.Location_2.ID,
		&i.Location_2.Latitude,
		&i.Location_2.Longitude,
	)
	return i, err
}

const insertGeoJson = `-- name: InsertGeoJson :exec
INSERT INTO transportation_geojson (transportation_id, geojson)
VALUES ($1, $2)
    ON CONFLICT(transportation_id)
DO UPDATE SET
    geojson = $2
`

type InsertGeoJsonParams struct {
	TransportationID int32
	Geojson          []byte
}

func (q *Queries) InsertGeoJson(ctx context.Context, arg InsertGeoJsonParams) error {
	_, err := q.db.Exec(ctx, insertGeoJson, arg.TransportationID, arg.Geojson)
	return err
}

const insertTransportation = `-- name: InsertTransportation :one
INSERT INTO transportation (trip_id, type, origin_id, destination_id, departure_time, arrival_time, price)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type InsertTransportationParams struct {
	TripID        int32
	Type          string
	OriginID      int32
	DestinationID int32
	DepartureTime civil.DateTime
	ArrivalTime   civil.DateTime
	Price         *int32
}

func (q *Queries) InsertTransportation(ctx context.Context, arg InsertTransportationParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertTransportation,
		arg.TripID,
		arg.Type,
		arg.OriginID,
		arg.DestinationID,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.Price,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
