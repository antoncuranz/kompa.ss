// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity.sql

package sqlc

import (
	"context"
)

const getActivities = `-- name: GetActivities :many
SELECT id, trip_id, name, date, time, description
FROM activity
`

func (q *Queries) GetActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.Query(ctx, getActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Name,
			&i.Date,
			&i.Time,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivityByID = `-- name: GetActivityByID :one
SELECT id, trip_id, name, date, time, description
FROM activity
WHERE id = $1
`

func (q *Queries) GetActivityByID(ctx context.Context, id int32) (Activity, error) {
	row := q.db.QueryRow(ctx, getActivityByID, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Name,
		&i.Date,
		&i.Time,
		&i.Description,
	)
	return i, err
}
