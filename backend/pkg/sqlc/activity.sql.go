// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity.sql

package sqlc

import (
	"context"
)

const getActivities = `-- name: GetActivities :many
SELECT activity.id, activity.trip_id, activity.location_id, activity.name, activity.date, activity.time, activity.description, location.id, location.latitude, location.longitude
FROM activity
LEFT JOIN location on activity.location_id = location.id
`

type GetActivitiesRow struct {
	Activity  Activity
	ID        *int32
	Latitude  *float32
	Longitude *float32
}

func (q *Queries) GetActivities(ctx context.Context) ([]GetActivitiesRow, error) {
	rows, err := q.db.Query(ctx, getActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetActivitiesRow{}
	for rows.Next() {
		var i GetActivitiesRow
		if err := rows.Scan(
			&i.Activity.ID,
			&i.Activity.TripID,
			&i.Activity.LocationID,
			&i.Activity.Name,
			&i.Activity.Date,
			&i.Activity.Time,
			&i.Activity.Description,
			&i.ID,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivityByID = `-- name: GetActivityByID :one
SELECT activity.id, activity.trip_id, activity.location_id, activity.name, activity.date, activity.time, activity.description, location.id, location.latitude, location.longitude
FROM activity
LEFT JOIN location on activity.location_id = location.id
WHERE activity.id = $1
`

type GetActivityByIDRow struct {
	Activity  Activity
	ID        *int32
	Latitude  *float32
	Longitude *float32
}

func (q *Queries) GetActivityByID(ctx context.Context, id int32) (GetActivityByIDRow, error) {
	row := q.db.QueryRow(ctx, getActivityByID, id)
	var i GetActivityByIDRow
	err := row.Scan(
		&i.Activity.ID,
		&i.Activity.TripID,
		&i.Activity.LocationID,
		&i.Activity.Name,
		&i.Activity.Date,
		&i.Activity.Time,
		&i.Activity.Description,
		&i.ID,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}
