// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity.sql

package sqlc

import (
	"context"

	"cloud.google.com/go/civil"
)

const getActivities = `-- name: GetActivities :many
SELECT activity.id, activity.trip_id, activity.location_id, activity.name, activity.date, activity.time, activity.description, activity.address, activity.price, location.id, location.latitude, location.longitude
FROM activity
LEFT JOIN location on activity.location_id = location.id
WHERE activity.id = $1
`

type GetActivitiesRow struct {
	Activity  Activity
	ID        *int32
	Latitude  *float32
	Longitude *float32
}

func (q *Queries) GetActivities(ctx context.Context, id int32) ([]GetActivitiesRow, error) {
	rows, err := q.db.Query(ctx, getActivities, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetActivitiesRow{}
	for rows.Next() {
		var i GetActivitiesRow
		if err := rows.Scan(
			&i.Activity.ID,
			&i.Activity.TripID,
			&i.Activity.LocationID,
			&i.Activity.Name,
			&i.Activity.Date,
			&i.Activity.Time,
			&i.Activity.Description,
			&i.Activity.Address,
			&i.Activity.Price,
			&i.ID,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivityByID = `-- name: GetActivityByID :one
SELECT activity.id, activity.trip_id, activity.location_id, activity.name, activity.date, activity.time, activity.description, activity.address, activity.price, location.id, location.latitude, location.longitude
FROM activity
LEFT JOIN location on activity.location_id = location.id
WHERE trip_id = $1
AND activity.id = $2
`

type GetActivityByIDParams struct {
	TripID int32
	ID     int32
}

type GetActivityByIDRow struct {
	Activity  Activity
	ID        *int32
	Latitude  *float32
	Longitude *float32
}

func (q *Queries) GetActivityByID(ctx context.Context, arg GetActivityByIDParams) (GetActivityByIDRow, error) {
	row := q.db.QueryRow(ctx, getActivityByID, arg.TripID, arg.ID)
	var i GetActivityByIDRow
	err := row.Scan(
		&i.Activity.ID,
		&i.Activity.TripID,
		&i.Activity.LocationID,
		&i.Activity.Name,
		&i.Activity.Date,
		&i.Activity.Time,
		&i.Activity.Description,
		&i.Activity.Address,
		&i.Activity.Price,
		&i.ID,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const insertActivity = `-- name: InsertActivity :one
INSERT INTO activity (
    trip_id, location_id, name, date, time, address, description, price
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id
`

type InsertActivityParams struct {
	TripID      int32
	LocationID  *int32
	Name        string
	Date        civil.Date
	Time        *civil.Time
	Address     *string
	Description *string
	Price       *int32
}

func (q *Queries) InsertActivity(ctx context.Context, arg InsertActivityParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertActivity,
		arg.TripID,
		arg.LocationID,
		arg.Name,
		arg.Date,
		arg.Time,
		arg.Address,
		arg.Description,
		arg.Price,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
