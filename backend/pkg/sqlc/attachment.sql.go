// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attachment.sql

package sqlc

import (
	"context"
)

const deleteAttachmentByID = `-- name: DeleteAttachmentByID :exec
DELETE
FROM attachment
WHERE trip_id = $1
  AND id = $2
`

type DeleteAttachmentByIDParams struct {
	TripID int32
	ID     int32
}

func (q *Queries) DeleteAttachmentByID(ctx context.Context, arg DeleteAttachmentByIDParams) error {
	_, err := q.db.Exec(ctx, deleteAttachmentByID, arg.TripID, arg.ID)
	return err
}

const getAttachmentByID = `-- name: GetAttachmentByID :one
SELECT id, trip_id, name, blob
FROM attachment
WHERE trip_id = $1
  AND id = $2
`

type GetAttachmentByIDParams struct {
	TripID int32
	ID     int32
}

func (q *Queries) GetAttachmentByID(ctx context.Context, arg GetAttachmentByIDParams) (Attachment, error) {
	row := q.db.QueryRow(ctx, getAttachmentByID, arg.TripID, arg.ID)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Name,
		&i.Blob,
	)
	return i, err
}

const getAttachments = `-- name: GetAttachments :many
SELECT id, trip_id, name, blob
FROM attachment
WHERE trip_id = $1
`

func (q *Queries) GetAttachments(ctx context.Context, tripID int32) ([]Attachment, error) {
	rows, err := q.db.Query(ctx, getAttachments, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attachment{}
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Name,
			&i.Blob,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAttachment = `-- name: InsertAttachment :one
INSERT INTO attachment (trip_id, name, blob)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertAttachmentParams struct {
	TripID int32
	Name   string
	Blob   []byte
}

func (q *Queries) InsertAttachment(ctx context.Context, arg InsertAttachmentParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertAttachment, arg.TripID, arg.Name, arg.Blob)
	var id int32
	err := row.Scan(&id)
	return id, err
}
