// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accommodation.sql

package sqlc

import (
	"context"
)

const getAccommodationByID = `-- name: GetAccommodationByID :one
SELECT id, trip_id, name, arrival_date, departure_date, check_in_time, check_out_time, description, location, price
FROM accommodation
WHERE id = $1
`

func (q *Queries) GetAccommodationByID(ctx context.Context, id int32) (Accommodation, error) {
	row := q.db.QueryRow(ctx, getAccommodationByID, id)
	var i Accommodation
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.Name,
		&i.ArrivalDate,
		&i.DepartureDate,
		&i.CheckInTime,
		&i.CheckOutTime,
		&i.Description,
		&i.Location,
		&i.Price,
	)
	return i, err
}

const getAllAccommodation = `-- name: GetAllAccommodation :many
SELECT id, trip_id, name, arrival_date, departure_date, check_in_time, check_out_time, description, location, price
FROM accommodation
`

func (q *Queries) GetAllAccommodation(ctx context.Context) ([]Accommodation, error) {
	rows, err := q.db.Query(ctx, getAllAccommodation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Accommodation{}
	for rows.Next() {
		var i Accommodation
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Name,
			&i.ArrivalDate,
			&i.DepartureDate,
			&i.CheckInTime,
			&i.CheckOutTime,
			&i.Description,
			&i.Location,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
