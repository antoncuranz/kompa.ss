// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trip.sql

package sqlc

import (
	"context"

	"cloud.google.com/go/civil"
)

const deleteTripByID = `-- name: DeleteTripByID :one
DELETE
FROM trip
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteTripByID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteTripByID, id)
	err := row.Scan(&id)
	return id, err
}

const getTripByID = `-- name: GetTripByID :one
SELECT id, name, start_date, end_date, description, image_url, owner_id
FROM trip
WHERE id = $1
`

func (q *Queries) GetTripByID(ctx context.Context, id int32) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripByID, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.Description,
		&i.ImageUrl,
		&i.OwnerID,
	)
	return i, err
}

const getTrips = `-- name: GetTrips :many
SELECT trip.id, trip.name, trip.start_date, trip.end_date, trip.description, trip.image_url, trip.owner_id
FROM trip
LEFT JOIN permissions p ON trip.id = p.trip_id
WHERE trip.owner_id = $1 OR p.user_id = $1
`

func (q *Queries) GetTrips(ctx context.Context, userID int32) ([]Trip, error) {
	rows, err := q.db.Query(ctx, getTrips, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trip{}
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.Description,
			&i.ImageUrl,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTrip = `-- name: InsertTrip :one
INSERT INTO trip (owner_id, name, start_date, end_date, description, image_url)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type InsertTripParams struct {
	OwnerID     int32
	Name        string
	StartDate   civil.Date
	EndDate     civil.Date
	Description *string
	ImageUrl    *string
}

func (q *Queries) InsertTrip(ctx context.Context, arg InsertTripParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertTrip,
		arg.OwnerID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
		arg.ImageUrl,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateTrip = `-- name: UpdateTrip :exec
UPDATE trip
SET name        = $2,
    start_date  = $3,
    end_date    = $4,
    description = $5,
    image_url   = $6
WHERE id = $1
`

type UpdateTripParams struct {
	ID          int32
	Name        string
	StartDate   civil.Date
	EndDate     civil.Date
	Description *string
	ImageUrl    *string
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) error {
	_, err := q.db.Exec(ctx, updateTrip,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
		arg.ImageUrl,
	)
	return err
}
