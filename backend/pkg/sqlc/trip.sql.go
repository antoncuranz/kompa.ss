// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trip.sql

package sqlc

import (
	"context"
)

const getTripByID = `-- name: GetTripByID :one
SELECT id, name, description, start_date, end_date
FROM trip
WHERE id = $1
`

func (q *Queries) GetTripByID(ctx context.Context, id int32) (Trip, error) {
	row := q.db.QueryRow(ctx, getTripByID, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getTrips = `-- name: GetTrips :many
SELECT id, name, description, start_date, end_date
FROM trip
`

func (q *Queries) GetTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.Query(ctx, getTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
