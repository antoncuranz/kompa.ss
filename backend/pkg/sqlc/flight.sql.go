// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flight.sql

package sqlc

import (
	"context"

	"cloud.google.com/go/civil"
)

const getFlightByID = `-- name: GetFlightByID :one
SELECT id, trip_id, price
FROM flight f
WHERE id = $1
`

func (q *Queries) GetFlightByID(ctx context.Context, id int32) (Flight, error) {
	row := q.db.QueryRow(ctx, getFlightByID, id)
	var i Flight
	err := row.Scan(&i.ID, &i.TripID, &i.Price)
	return i, err
}

const getFlightLegsByFlightID = `-- name: GetFlightLegsByFlightID :many
SELECT flight_leg.id, flight_leg.flight_id, flight_leg.origin, flight_leg.destination, flight_leg.airline, flight_leg.flight_number, flight_leg.departure_time, flight_leg.arrival_time, flight_leg.duration_in_minutes, flight_leg.aircraft, origin.iata, origin.name, origin.municipality, origin.location, destination.iata, destination.name, destination.municipality, destination.location
FROM flight_leg
JOIN airport origin on flight_leg.origin = origin.iata
JOIN airport destination on flight_leg.destination = destination.iata
WHERE flight_id = $1
`

type GetFlightLegsByFlightIDRow struct {
	FlightLeg FlightLeg
	Airport   Airport
	Airport_2 Airport
}

func (q *Queries) GetFlightLegsByFlightID(ctx context.Context, flightID int32) ([]GetFlightLegsByFlightIDRow, error) {
	rows, err := q.db.Query(ctx, getFlightLegsByFlightID, flightID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFlightLegsByFlightIDRow{}
	for rows.Next() {
		var i GetFlightLegsByFlightIDRow
		if err := rows.Scan(
			&i.FlightLeg.ID,
			&i.FlightLeg.FlightID,
			&i.FlightLeg.Origin,
			&i.FlightLeg.Destination,
			&i.FlightLeg.Airline,
			&i.FlightLeg.FlightNumber,
			&i.FlightLeg.DepartureTime,
			&i.FlightLeg.ArrivalTime,
			&i.FlightLeg.DurationInMinutes,
			&i.FlightLeg.Aircraft,
			&i.Airport.Iata,
			&i.Airport.Name,
			&i.Airport.Municipality,
			&i.Airport.Location,
			&i.Airport_2.Iata,
			&i.Airport_2.Name,
			&i.Airport_2.Municipality,
			&i.Airport_2.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlights = `-- name: GetFlights :many
SELECT id, trip_id, price
FROM flight
`

func (q *Queries) GetFlights(ctx context.Context) ([]Flight, error) {
	rows, err := q.db.Query(ctx, getFlights)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Flight{}
	for rows.Next() {
		var i Flight
		if err := rows.Scan(&i.ID, &i.TripID, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPnrsByFlightID = `-- name: GetPnrsByFlightID :many
SELECT id, flight_id, airline, pnr
FROM pnr
WHERE flight_id = $1
`

func (q *Queries) GetPnrsByFlightID(ctx context.Context, flightID int32) ([]Pnr, error) {
	rows, err := q.db.Query(ctx, getPnrsByFlightID, flightID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pnr{}
	for rows.Next() {
		var i Pnr
		if err := rows.Scan(
			&i.ID,
			&i.FlightID,
			&i.Airline,
			&i.Pnr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAirport = `-- name: InsertAirport :exec
INSERT INTO airport (
    iata, name, municipality, location
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT DO NOTHING
`

type InsertAirportParams struct {
	Iata         string
	Name         string
	Municipality string
	Location     *string
}

func (q *Queries) InsertAirport(ctx context.Context, arg InsertAirportParams) error {
	_, err := q.db.Exec(ctx, insertAirport,
		arg.Iata,
		arg.Name,
		arg.Municipality,
		arg.Location,
	)
	return err
}

const insertFlight = `-- name: InsertFlight :one
INSERT INTO flight (
    trip_id, price
) VALUES (
    $1, $2
 )
RETURNING id
`

type InsertFlightParams struct {
	TripID int32
	Price  *int32
}

func (q *Queries) InsertFlight(ctx context.Context, arg InsertFlightParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertFlight, arg.TripID, arg.Price)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertFlightLeg = `-- name: InsertFlightLeg :one
INSERT INTO flight_leg (
    flight_id, origin, destination, airline, flight_number, departure_time, arrival_time, duration_in_minutes, aircraft
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id
`

type InsertFlightLegParams struct {
	FlightID          int32
	Origin            string
	Destination       string
	Airline           string
	FlightNumber      string
	DepartureTime     civil.DateTime
	ArrivalTime       civil.DateTime
	DurationInMinutes int32
	Aircraft          *string
}

func (q *Queries) InsertFlightLeg(ctx context.Context, arg InsertFlightLegParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertFlightLeg,
		arg.FlightID,
		arg.Origin,
		arg.Destination,
		arg.Airline,
		arg.FlightNumber,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.DurationInMinutes,
		arg.Aircraft,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertPNR = `-- name: InsertPNR :one
INSERT INTO pnr (
    flight_id, airline, pnr
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type InsertPNRParams struct {
	FlightID int32
	Airline  string
	Pnr      string
}

func (q *Queries) InsertPNR(ctx context.Context, arg InsertPNRParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertPNR, arg.FlightID, arg.Airline, arg.Pnr)
	var id int32
	err := row.Scan(&id)
	return id, err
}
