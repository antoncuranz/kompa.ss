// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// GetLocation invokes getLocation operation.
	//
	// Lookup location.
	//
	// GET /geocoding/location
	GetLocation(ctx context.Context, params GetLocationParams) (GetLocationRes, error)
	// GetTrainStation invokes getTrainStation operation.
	//
	// Lookup train station.
	//
	// GET /geocoding/station
	GetTrainStation(ctx context.Context, params GetTrainStationParams) (GetTrainStationRes, error)
	// PostFlight invokes postFlight operation.
	//
	// Find flight.
	//
	// POST /flights
	PostFlight(ctx context.Context, request *RequestFlight) (PostFlightRes, error)
	// PostTrainJourney invokes postTrainJourney operation.
	//
	// Find train journey.
	//
	// POST /trains
	PostTrainJourney(ctx context.Context, request *RequestTrain) (PostTrainJourneyRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// GetLocation invokes getLocation operation.
//
// Lookup location.
//
// GET /geocoding/location
func (c *Client) GetLocation(ctx context.Context, params GetLocationParams) (GetLocationRes, error) {
	res, err := c.sendGetLocation(ctx, params)
	return res, err
}

func (c *Client) sendGetLocation(ctx context.Context, params GetLocationParams) (res GetLocationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/geocoding/location"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "query" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Query))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetLocationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetTrainStation invokes getTrainStation operation.
//
// Lookup train station.
//
// GET /geocoding/station
func (c *Client) GetTrainStation(ctx context.Context, params GetTrainStationParams) (GetTrainStationRes, error) {
	res, err := c.sendGetTrainStation(ctx, params)
	return res, err
}

func (c *Client) sendGetTrainStation(ctx context.Context, params GetTrainStationParams) (res GetTrainStationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/geocoding/station"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "query" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Query))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetTrainStationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostFlight invokes postFlight operation.
//
// Find flight.
//
// POST /flights
func (c *Client) PostFlight(ctx context.Context, request *RequestFlight) (PostFlightRes, error) {
	res, err := c.sendPostFlight(ctx, request)
	return res, err
}

func (c *Client) sendPostFlight(ctx context.Context, request *RequestFlight) (res PostFlightRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/flights"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostFlightRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostFlightResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostTrainJourney invokes postTrainJourney operation.
//
// Find train journey.
//
// POST /trains
func (c *Client) PostTrainJourney(ctx context.Context, request *RequestTrain) (PostTrainJourneyRes, error) {
	res, err := c.sendPostTrainJourney(ctx, request)
	return res, err
}

func (c *Client) sendPostTrainJourney(ctx context.Context, request *RequestTrain) (res PostTrainJourneyRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/trains"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostTrainJourneyRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostTrainJourneyResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
