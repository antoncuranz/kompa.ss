// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// DeleteAccommodation invokes deleteAccommodation operation.
	//
	// Delete accommodation.
	//
	// DELETE /trips/{trip_id}/accommodation/{accommodation_id}
	DeleteAccommodation(ctx context.Context, params DeleteAccommodationParams) (DeleteAccommodationRes, error)
	// DeleteActivity invokes deleteActivity operation.
	//
	// Delete activity.
	//
	// DELETE /trips/{trip_id}/activities/{activity_id}
	DeleteActivity(ctx context.Context, params DeleteActivityParams) (DeleteActivityRes, error)
	// DeleteAttachment invokes deleteAttachment operation.
	//
	// Delete attachment.
	//
	// DELETE /trips/{trip_id}/attachments/{attachment_id}
	DeleteAttachment(ctx context.Context, params DeleteAttachmentParams) (DeleteAttachmentRes, error)
	// DeleteFlight invokes deleteFlight operation.
	//
	// Delete flight.
	//
	// DELETE /trips/{trip_id}/flights/{flight_id}
	DeleteFlight(ctx context.Context, params DeleteFlightParams) (DeleteFlightRes, error)
	// DeleteTransportation invokes deleteTransportation operation.
	//
	// Delete Transportation.
	//
	// DELETE /trips/{trip_id}/transportation/{transportation_id}
	DeleteTransportation(ctx context.Context, params DeleteTransportationParams) (DeleteTransportationRes, error)
	// DeleteTrip invokes deleteTrip operation.
	//
	// Delete trip.
	//
	// DELETE /trips/{trip_id}
	DeleteTrip(ctx context.Context, params DeleteTripParams) (DeleteTripRes, error)
	// DownloadAttachment invokes downloadAttachment operation.
	//
	// Download attachment by ID.
	//
	// GET /trips/{trip_id}/attachments/{attachment_id}
	DownloadAttachment(ctx context.Context, params DownloadAttachmentParams) (DownloadAttachmentRes, error)
	// GetAccommodationByID invokes getAccommodationByID operation.
	//
	// Get accommodation by ID.
	//
	// GET /trips/{trip_id}/accommodation/{accommodation_id}
	GetAccommodationByID(ctx context.Context, params GetAccommodationByIDParams) (GetAccommodationByIDRes, error)
	// GetActivities invokes getActivities operation.
	//
	// Get all activities.
	//
	// GET /trips/{trip_id}/activities
	GetActivities(ctx context.Context, params GetActivitiesParams) (GetActivitiesRes, error)
	// GetActivity invokes getActivity operation.
	//
	// Get activity by ID.
	//
	// GET /trips/{trip_id}/activities/{activity_id}
	GetActivity(ctx context.Context, params GetActivityParams) (GetActivityRes, error)
	// GetAllAccommodation invokes getAllAccommodation operation.
	//
	// Get all accommodation.
	//
	// GET /trips/{trip_id}/accommodation
	GetAllAccommodation(ctx context.Context, params GetAllAccommodationParams) (GetAllAccommodationRes, error)
	// GetAllTransportation invokes getAllTransportation operation.
	//
	// Get all Transportation.
	//
	// GET /trips/{trip_id}/Transportation
	GetAllTransportation(ctx context.Context, params GetAllTransportationParams) (GetAllTransportationRes, error)
	// GetAttachments invokes getAttachments operation.
	//
	// Get all attachments.
	//
	// GET /trips/{trip_id}/attachments
	GetAttachments(ctx context.Context, params GetAttachmentsParams) (GetAttachmentsRes, error)
	// GetFlight invokes getFlight operation.
	//
	// Get flight by ID.
	//
	// GET /trips/{trip_id}/flights/{flight_id}
	GetFlight(ctx context.Context, params GetFlightParams) (GetFlightRes, error)
	// GetFlights invokes getFlights operation.
	//
	// Get all flights.
	//
	// GET /trips/{trip_id}/flights
	GetFlights(ctx context.Context, params GetFlightsParams) (GetFlightsRes, error)
	// GetTransportation invokes getTransportation operation.
	//
	// Get Transportation by ID.
	//
	// GET /trips/{trip_id}/transportation/{transportation_id}
	GetTransportation(ctx context.Context, params GetTransportationParams) (GetTransportationRes, error)
	// GetTrip invokes getTrip operation.
	//
	// Get trip by ID.
	//
	// GET /trips/{trip_id}
	GetTrip(ctx context.Context, params GetTripParams) (GetTripRes, error)
	// GetTrips invokes getTrips operation.
	//
	// Get all trips.
	//
	// GET /trips
	GetTrips(ctx context.Context) (GetTripsRes, error)
	// GetUser invokes getUser operation.
	//
	// Get user by ID.
	//
	// GET /users/{user_id}
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// GetUsers invokes getUsers operation.
	//
	// Get all users.
	//
	// GET /users
	GetUsers(ctx context.Context) (GetUsersRes, error)
	// PostAccommodation invokes postAccommodation operation.
	//
	// Add accommodation.
	//
	// POST /trips/{trip_id}/accommodation
	PostAccommodation(ctx context.Context, request *RequestAccommodation, params PostAccommodationParams) (PostAccommodationRes, error)
	// PostActivity invokes postActivity operation.
	//
	// Add activity.
	//
	// POST /trips/{trip_id}/activities
	PostActivity(ctx context.Context, request *RequestActivity, params PostActivityParams) (PostActivityRes, error)
	// PostAttachment invokes postAttachment operation.
	//
	// Add attachment.
	//
	// POST /trips/{trip_id}/attachments
	PostAttachment(ctx context.Context, request *V1AttachmentsParamMultipart, params PostAttachmentParams) (PostAttachmentRes, error)
	// PostFlight invokes postFlight operation.
	//
	// Add flight.
	//
	// POST /trips/{trip_id}/flights
	PostFlight(ctx context.Context, request *RequestFlight, params PostFlightParams) (PostFlightRes, error)
	// PostTrip invokes postTrip operation.
	//
	// Add trip.
	//
	// POST /trips
	PostTrip(ctx context.Context, request *RequestTrip) (PostTripRes, error)
	// PutAccommodation invokes putAccommodation operation.
	//
	// Update accommodation.
	//
	// PUT /trips/{trip_id}/accommodation/{accommodation_id}
	PutAccommodation(ctx context.Context, request *RequestAccommodation, params PutAccommodationParams) (PutAccommodationRes, error)
	// PutActivity invokes putActivity operation.
	//
	// Update activity.
	//
	// PUT /trips/{trip_id}/activities/{activity_id}
	PutActivity(ctx context.Context, request *RequestActivity, params PutActivityParams) (PutActivityRes, error)
	// PutFlight invokes putFlight operation.
	//
	// Update flight.
	//
	// PUT /trips/{trip_id}/flights/{flight_id}
	PutFlight(ctx context.Context, request *RequestFlight, params PutFlightParams) (PutFlightRes, error)
	// PutTrip invokes putTrip operation.
	//
	// Update trip.
	//
	// PUT /trips/{trip_id}
	PutTrip(ctx context.Context, request *RequestTrip, params PutTripParams) (PutTripRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// DeleteAccommodation invokes deleteAccommodation operation.
//
// Delete accommodation.
//
// DELETE /trips/{trip_id}/accommodation/{accommodation_id}
func (c *Client) DeleteAccommodation(ctx context.Context, params DeleteAccommodationParams) (DeleteAccommodationRes, error) {
	res, err := c.sendDeleteAccommodation(ctx, params)
	return res, err
}

func (c *Client) sendDeleteAccommodation(ctx context.Context, params DeleteAccommodationParams) (res DeleteAccommodationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/accommodation/"
	{
		// Encode "accommodation_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "accommodation_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.AccommodationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAccommodationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteActivity invokes deleteActivity operation.
//
// Delete activity.
//
// DELETE /trips/{trip_id}/activities/{activity_id}
func (c *Client) DeleteActivity(ctx context.Context, params DeleteActivityParams) (DeleteActivityRes, error) {
	res, err := c.sendDeleteActivity(ctx, params)
	return res, err
}

func (c *Client) sendDeleteActivity(ctx context.Context, params DeleteActivityParams) (res DeleteActivityRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/activities/"
	{
		// Encode "activity_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "activity_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ActivityID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteActivityResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAttachment invokes deleteAttachment operation.
//
// Delete attachment.
//
// DELETE /trips/{trip_id}/attachments/{attachment_id}
func (c *Client) DeleteAttachment(ctx context.Context, params DeleteAttachmentParams) (DeleteAttachmentRes, error) {
	res, err := c.sendDeleteAttachment(ctx, params)
	return res, err
}

func (c *Client) sendDeleteAttachment(ctx context.Context, params DeleteAttachmentParams) (res DeleteAttachmentRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/attachments/"
	{
		// Encode "attachment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "attachment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.AttachmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteAttachmentResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteFlight invokes deleteFlight operation.
//
// Delete flight.
//
// DELETE /trips/{trip_id}/flights/{flight_id}
func (c *Client) DeleteFlight(ctx context.Context, params DeleteFlightParams) (DeleteFlightRes, error) {
	res, err := c.sendDeleteFlight(ctx, params)
	return res, err
}

func (c *Client) sendDeleteFlight(ctx context.Context, params DeleteFlightParams) (res DeleteFlightRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/flights/"
	{
		// Encode "flight_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "flight_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.FlightID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteFlightResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteTransportation invokes deleteTransportation operation.
//
// Delete Transportation.
//
// DELETE /trips/{trip_id}/transportation/{transportation_id}
func (c *Client) DeleteTransportation(ctx context.Context, params DeleteTransportationParams) (DeleteTransportationRes, error) {
	res, err := c.sendDeleteTransportation(ctx, params)
	return res, err
}

func (c *Client) sendDeleteTransportation(ctx context.Context, params DeleteTransportationParams) (res DeleteTransportationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/transportation/"
	{
		// Encode "transportation_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "transportation_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TransportationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteTransportationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteTrip invokes deleteTrip operation.
//
// Delete trip.
//
// DELETE /trips/{trip_id}
func (c *Client) DeleteTrip(ctx context.Context, params DeleteTripParams) (DeleteTripRes, error) {
	res, err := c.sendDeleteTrip(ctx, params)
	return res, err
}

func (c *Client) sendDeleteTrip(ctx context.Context, params DeleteTripParams) (res DeleteTripRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteTripResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DownloadAttachment invokes downloadAttachment operation.
//
// Download attachment by ID.
//
// GET /trips/{trip_id}/attachments/{attachment_id}
func (c *Client) DownloadAttachment(ctx context.Context, params DownloadAttachmentParams) (DownloadAttachmentRes, error) {
	res, err := c.sendDownloadAttachment(ctx, params)
	return res, err
}

func (c *Client) sendDownloadAttachment(ctx context.Context, params DownloadAttachmentParams) (res DownloadAttachmentRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/attachments/"
	{
		// Encode "attachment_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "attachment_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.AttachmentID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDownloadAttachmentResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAccommodationByID invokes getAccommodationByID operation.
//
// Get accommodation by ID.
//
// GET /trips/{trip_id}/accommodation/{accommodation_id}
func (c *Client) GetAccommodationByID(ctx context.Context, params GetAccommodationByIDParams) (GetAccommodationByIDRes, error) {
	res, err := c.sendGetAccommodationByID(ctx, params)
	return res, err
}

func (c *Client) sendGetAccommodationByID(ctx context.Context, params GetAccommodationByIDParams) (res GetAccommodationByIDRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/accommodation/"
	{
		// Encode "accommodation_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "accommodation_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.AccommodationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAccommodationByIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetActivities invokes getActivities operation.
//
// Get all activities.
//
// GET /trips/{trip_id}/activities
func (c *Client) GetActivities(ctx context.Context, params GetActivitiesParams) (GetActivitiesRes, error) {
	res, err := c.sendGetActivities(ctx, params)
	return res, err
}

func (c *Client) sendGetActivities(ctx context.Context, params GetActivitiesParams) (res GetActivitiesRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/activities"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetActivitiesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetActivity invokes getActivity operation.
//
// Get activity by ID.
//
// GET /trips/{trip_id}/activities/{activity_id}
func (c *Client) GetActivity(ctx context.Context, params GetActivityParams) (GetActivityRes, error) {
	res, err := c.sendGetActivity(ctx, params)
	return res, err
}

func (c *Client) sendGetActivity(ctx context.Context, params GetActivityParams) (res GetActivityRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/activities/"
	{
		// Encode "activity_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "activity_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ActivityID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetActivityResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAllAccommodation invokes getAllAccommodation operation.
//
// Get all accommodation.
//
// GET /trips/{trip_id}/accommodation
func (c *Client) GetAllAccommodation(ctx context.Context, params GetAllAccommodationParams) (GetAllAccommodationRes, error) {
	res, err := c.sendGetAllAccommodation(ctx, params)
	return res, err
}

func (c *Client) sendGetAllAccommodation(ctx context.Context, params GetAllAccommodationParams) (res GetAllAccommodationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/accommodation"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAllAccommodationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAllTransportation invokes getAllTransportation operation.
//
// Get all Transportation.
//
// GET /trips/{trip_id}/Transportation
func (c *Client) GetAllTransportation(ctx context.Context, params GetAllTransportationParams) (GetAllTransportationRes, error) {
	res, err := c.sendGetAllTransportation(ctx, params)
	return res, err
}

func (c *Client) sendGetAllTransportation(ctx context.Context, params GetAllTransportationParams) (res GetAllTransportationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/Transportation"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAllTransportationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAttachments invokes getAttachments operation.
//
// Get all attachments.
//
// GET /trips/{trip_id}/attachments
func (c *Client) GetAttachments(ctx context.Context, params GetAttachmentsParams) (GetAttachmentsRes, error) {
	res, err := c.sendGetAttachments(ctx, params)
	return res, err
}

func (c *Client) sendGetAttachments(ctx context.Context, params GetAttachmentsParams) (res GetAttachmentsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/attachments"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAttachmentsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetFlight invokes getFlight operation.
//
// Get flight by ID.
//
// GET /trips/{trip_id}/flights/{flight_id}
func (c *Client) GetFlight(ctx context.Context, params GetFlightParams) (GetFlightRes, error) {
	res, err := c.sendGetFlight(ctx, params)
	return res, err
}

func (c *Client) sendGetFlight(ctx context.Context, params GetFlightParams) (res GetFlightRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/flights/"
	{
		// Encode "flight_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "flight_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.FlightID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetFlightResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetFlights invokes getFlights operation.
//
// Get all flights.
//
// GET /trips/{trip_id}/flights
func (c *Client) GetFlights(ctx context.Context, params GetFlightsParams) (GetFlightsRes, error) {
	res, err := c.sendGetFlights(ctx, params)
	return res, err
}

func (c *Client) sendGetFlights(ctx context.Context, params GetFlightsParams) (res GetFlightsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/flights"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetFlightsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetTransportation invokes getTransportation operation.
//
// Get Transportation by ID.
//
// GET /trips/{trip_id}/transportation/{transportation_id}
func (c *Client) GetTransportation(ctx context.Context, params GetTransportationParams) (GetTransportationRes, error) {
	res, err := c.sendGetTransportation(ctx, params)
	return res, err
}

func (c *Client) sendGetTransportation(ctx context.Context, params GetTransportationParams) (res GetTransportationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/transportation/"
	{
		// Encode "transportation_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "transportation_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TransportationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetTransportationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetTrip invokes getTrip operation.
//
// Get trip by ID.
//
// GET /trips/{trip_id}
func (c *Client) GetTrip(ctx context.Context, params GetTripParams) (GetTripRes, error) {
	res, err := c.sendGetTrip(ctx, params)
	return res, err
}

func (c *Client) sendGetTrip(ctx context.Context, params GetTripParams) (res GetTripRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetTripResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetTrips invokes getTrips operation.
//
// Get all trips.
//
// GET /trips
func (c *Client) GetTrips(ctx context.Context) (GetTripsRes, error) {
	res, err := c.sendGetTrips(ctx)
	return res, err
}

func (c *Client) sendGetTrips(ctx context.Context) (res GetTripsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/trips"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetTripsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUser invokes getUser operation.
//
// Get user by ID.
//
// GET /users/{user_id}
func (c *Client) GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error) {
	res, err := c.sendGetUser(ctx, params)
	return res, err
}

func (c *Client) sendGetUser(ctx context.Context, params GetUserParams) (res GetUserRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/users/"
	{
		// Encode "user_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "user_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.UserID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUsers invokes getUsers operation.
//
// Get all users.
//
// GET /users
func (c *Client) GetUsers(ctx context.Context) (GetUsersRes, error) {
	res, err := c.sendGetUsers(ctx)
	return res, err
}

func (c *Client) sendGetUsers(ctx context.Context) (res GetUsersRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/users"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUsersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostAccommodation invokes postAccommodation operation.
//
// Add accommodation.
//
// POST /trips/{trip_id}/accommodation
func (c *Client) PostAccommodation(ctx context.Context, request *RequestAccommodation, params PostAccommodationParams) (PostAccommodationRes, error) {
	res, err := c.sendPostAccommodation(ctx, request, params)
	return res, err
}

func (c *Client) sendPostAccommodation(ctx context.Context, request *RequestAccommodation, params PostAccommodationParams) (res PostAccommodationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/accommodation"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostAccommodationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostAccommodationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostActivity invokes postActivity operation.
//
// Add activity.
//
// POST /trips/{trip_id}/activities
func (c *Client) PostActivity(ctx context.Context, request *RequestActivity, params PostActivityParams) (PostActivityRes, error) {
	res, err := c.sendPostActivity(ctx, request, params)
	return res, err
}

func (c *Client) sendPostActivity(ctx context.Context, request *RequestActivity, params PostActivityParams) (res PostActivityRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/activities"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostActivityRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostActivityResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostAttachment invokes postAttachment operation.
//
// Add attachment.
//
// POST /trips/{trip_id}/attachments
func (c *Client) PostAttachment(ctx context.Context, request *V1AttachmentsParamMultipart, params PostAttachmentParams) (PostAttachmentRes, error) {
	res, err := c.sendPostAttachment(ctx, request, params)
	return res, err
}

func (c *Client) sendPostAttachment(ctx context.Context, request *V1AttachmentsParamMultipart, params PostAttachmentParams) (res PostAttachmentRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/attachments"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostAttachmentRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostAttachmentResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostFlight invokes postFlight operation.
//
// Add flight.
//
// POST /trips/{trip_id}/flights
func (c *Client) PostFlight(ctx context.Context, request *RequestFlight, params PostFlightParams) (PostFlightRes, error) {
	res, err := c.sendPostFlight(ctx, request, params)
	return res, err
}

func (c *Client) sendPostFlight(ctx context.Context, request *RequestFlight, params PostFlightParams) (res PostFlightRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/flights"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostFlightRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostFlightResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostTrip invokes postTrip operation.
//
// Add trip.
//
// POST /trips
func (c *Client) PostTrip(ctx context.Context, request *RequestTrip) (PostTripRes, error) {
	res, err := c.sendPostTrip(ctx, request)
	return res, err
}

func (c *Client) sendPostTrip(ctx context.Context, request *RequestTrip) (res PostTripRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/trips"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostTripRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePostTripResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAccommodation invokes putAccommodation operation.
//
// Update accommodation.
//
// PUT /trips/{trip_id}/accommodation/{accommodation_id}
func (c *Client) PutAccommodation(ctx context.Context, request *RequestAccommodation, params PutAccommodationParams) (PutAccommodationRes, error) {
	res, err := c.sendPutAccommodation(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAccommodation(ctx context.Context, request *RequestAccommodation, params PutAccommodationParams) (res PutAccommodationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/accommodation/"
	{
		// Encode "accommodation_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "accommodation_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.AccommodationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAccommodationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutAccommodationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutActivity invokes putActivity operation.
//
// Update activity.
//
// PUT /trips/{trip_id}/activities/{activity_id}
func (c *Client) PutActivity(ctx context.Context, request *RequestActivity, params PutActivityParams) (PutActivityRes, error) {
	res, err := c.sendPutActivity(ctx, request, params)
	return res, err
}

func (c *Client) sendPutActivity(ctx context.Context, request *RequestActivity, params PutActivityParams) (res PutActivityRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/activities/"
	{
		// Encode "activity_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "activity_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.ActivityID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutActivityRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutActivityResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutFlight invokes putFlight operation.
//
// Update flight.
//
// PUT /trips/{trip_id}/flights/{flight_id}
func (c *Client) PutFlight(ctx context.Context, request *RequestFlight, params PutFlightParams) (PutFlightRes, error) {
	res, err := c.sendPutFlight(ctx, request, params)
	return res, err
}

func (c *Client) sendPutFlight(ctx context.Context, request *RequestFlight, params PutFlightParams) (res PutFlightRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/flights/"
	{
		// Encode "flight_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "flight_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.FlightID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutFlightRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutFlightResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutTrip invokes putTrip operation.
//
// Update trip.
//
// PUT /trips/{trip_id}
func (c *Client) PutTrip(ctx context.Context, request *RequestTrip, params PutTripParams) (PutTripRes, error) {
	res, err := c.sendPutTrip(ctx, request, params)
	return res, err
}

func (c *Client) sendPutTrip(ctx context.Context, request *RequestTrip, params PutTripParams) (res PutTripRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/trips/"
	{
		// Encode "trip_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "trip_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.IntToString(params.TripID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutTripRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePutTripResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
