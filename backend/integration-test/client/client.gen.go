// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// EntityAccommodation defines model for entity.Accommodation.
type EntityAccommodation struct {
	Address       *string         `json:"address,omitempty"`
	ArrivalDate   *string         `json:"arrivalDate,omitempty"`
	CheckInTime   *string         `json:"checkInTime,omitempty"`
	CheckOutTime  *string         `json:"checkOutTime,omitempty"`
	DepartureDate *string         `json:"departureDate,omitempty"`
	Description   *string         `json:"description,omitempty"`
	Id            *int            `json:"id,omitempty"`
	Location      *EntityLocation `json:"location,omitempty"`
	Name          *string         `json:"name,omitempty"`
	Price         *int            `json:"price,omitempty"`
	TripId        *int            `json:"tripId,omitempty"`
}

// EntityActivity defines model for entity.Activity.
type EntityActivity struct {
	Address     *string         `json:"address,omitempty"`
	Date        *string         `json:"date,omitempty"`
	Description *string         `json:"description,omitempty"`
	Id          *int            `json:"id,omitempty"`
	Location    *EntityLocation `json:"location,omitempty"`
	Name        *string         `json:"name,omitempty"`
	Price       *int            `json:"price,omitempty"`
	Time        *string         `json:"time,omitempty"`
	TripId      *int            `json:"tripId,omitempty"`
}

// EntityAirport defines model for entity.Airport.
type EntityAirport struct {
	Iata         *string         `json:"iata,omitempty"`
	Location     *EntityLocation `json:"location,omitempty"`
	Municipality *string         `json:"municipality,omitempty"`
	Name         *string         `json:"name,omitempty"`
}

// EntityAttachment defines model for entity.Attachment.
type EntityAttachment struct {
	Blob   *[]int  `json:"blob,omitempty"`
	Id     *int    `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	TripId *int    `json:"tripId,omitempty"`
}

// EntityFlight defines model for entity.Flight.
type EntityFlight struct {
	Id     *int               `json:"id,omitempty"`
	Legs   *[]EntityFlightLeg `json:"legs,omitempty"`
	Pnrs   *[]EntityPNR       `json:"pnrs,omitempty"`
	Price  *int               `json:"price,omitempty"`
	TripId *int               `json:"tripId,omitempty"`
}

// EntityFlightLeg defines model for entity.FlightLeg.
type EntityFlightLeg struct {
	Aircraft          *string        `json:"aircraft,omitempty"`
	Airline           *string        `json:"airline,omitempty"`
	ArrivalDateTime   *string        `json:"arrivalDateTime,omitempty"`
	DepartureDateTime *string        `json:"departureDateTime,omitempty"`
	Destination       *EntityAirport `json:"destination,omitempty"`
	DurationInMinutes *int           `json:"durationInMinutes,omitempty"`
	FlightNumber      *string        `json:"flightNumber,omitempty"`
	Id                *int           `json:"id,omitempty"`
	Origin            *EntityAirport `json:"origin,omitempty"`
}

// EntityLocation defines model for entity.Location.
type EntityLocation struct {
	Id        *int     `json:"id,omitempty"`
	Latitude  *float32 `json:"latitude,omitempty"`
	Longitude *float32 `json:"longitude,omitempty"`
}

// EntityPNR defines model for entity.PNR.
type EntityPNR struct {
	Airline *string `json:"airline,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Pnr     *string `json:"pnr,omitempty"`
}

// EntityTrip defines model for entity.Trip.
type EntityTrip struct {
	Description *string `json:"description,omitempty"`
	EndDate     *string `json:"endDate,omitempty"`
	Id          *int    `json:"id,omitempty"`
	ImageUrl    *string `json:"imageUrl,omitempty"`
	Name        *string `json:"name,omitempty"`
	StartDate   *string `json:"startDate,omitempty"`
}

// EntityUser defines model for entity.User.
type EntityUser struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// RequestAccommodation defines model for request.Accommodation.
type RequestAccommodation struct {
	Address       *string         `json:"address,omitempty"`
	ArrivalDate   string          `json:"arrivalDate"`
	CheckInTime   *string         `json:"checkInTime,omitempty"`
	CheckOutTime  *string         `json:"checkOutTime,omitempty"`
	DepartureDate string          `json:"departureDate"`
	Description   *string         `json:"description,omitempty"`
	Location      *EntityLocation `json:"location,omitempty"`
	Name          string          `json:"name"`
	Price         *int            `json:"price,omitempty"`
}

// RequestActivity defines model for request.Activity.
type RequestActivity struct {
	Address     *string         `json:"address,omitempty"`
	Date        string          `json:"date"`
	Description *string         `json:"description,omitempty"`
	Location    *EntityLocation `json:"location,omitempty"`
	Name        string          `json:"name"`
	Price       *int            `json:"price,omitempty"`
	Time        *string         `json:"time,omitempty"`
}

// RequestFlight defines model for request.Flight.
type RequestFlight struct {
	Legs  []RequestFlightLeg `json:"legs"`
	Pnrs  []EntityPNR        `json:"pnrs"`
	Price *int               `json:"price,omitempty"`
}

// RequestFlightLeg defines model for request.FlightLeg.
type RequestFlightLeg struct {
	Date          string  `json:"date"`
	FlightNumber  string  `json:"flightNumber"`
	OriginAirport *string `json:"originAirport,omitempty"`
}

// RequestTrip defines model for request.Trip.
type RequestTrip struct {
	Description *string `json:"description,omitempty"`
	EndDate     string  `json:"endDate"`
	ImageUrl    *string `json:"imageUrl,omitempty"`
	Name        string  `json:"name"`
	StartDate   string  `json:"startDate"`
}

// ResponseError defines model for response.Error.
type ResponseError struct {
	Error *string `json:"error,omitempty"`
}

// PostAttachmentMultipartBody defines parameters for PostAttachment.
type PostAttachmentMultipartBody = []openapi_types.File

// PostTripJSONRequestBody defines body for PostTrip for application/json ContentType.
type PostTripJSONRequestBody = RequestTrip

// PutTripJSONRequestBody defines body for PutTrip for application/json ContentType.
type PutTripJSONRequestBody = RequestTrip

// PostAccommodationJSONRequestBody defines body for PostAccommodation for application/json ContentType.
type PostAccommodationJSONRequestBody = RequestAccommodation

// PutAccommodationJSONRequestBody defines body for PutAccommodation for application/json ContentType.
type PutAccommodationJSONRequestBody = RequestAccommodation

// PostActivityJSONRequestBody defines body for PostActivity for application/json ContentType.
type PostActivityJSONRequestBody = RequestActivity

// PutActivityJSONRequestBody defines body for PutActivity for application/json ContentType.
type PutActivityJSONRequestBody = RequestActivity

// PostAttachmentMultipartRequestBody defines body for PostAttachment for multipart/form-data ContentType.
type PostAttachmentMultipartRequestBody = PostAttachmentMultipartBody

// PostFlightJSONRequestBody defines body for PostFlight for application/json ContentType.
type PostFlightJSONRequestBody = RequestFlight

// PutFlightJSONRequestBody defines body for PutFlight for application/json ContentType.
type PutFlightJSONRequestBody = RequestFlight

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetTrips request
	GetTrips(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTripWithBody request with any body
	PostTripWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTrip(ctx context.Context, body PostTripJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTrip request
	DeleteTrip(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrip request
	GetTrip(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTripWithBody request with any body
	PutTripWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrip(ctx context.Context, tripId int, body PutTripJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAccommodation request
	GetAllAccommodation(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccommodationWithBody request with any body
	PostAccommodationWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccommodation(ctx context.Context, tripId int, body PostAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccommodation request
	DeleteAccommodation(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccommodationByID request
	GetAccommodationByID(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccommodationWithBody request with any body
	PutAccommodationWithBody(ctx context.Context, tripId int, accommodationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccommodation(ctx context.Context, tripId int, accommodationId int, body PutAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivities request
	GetActivities(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActivityWithBody request with any body
	PostActivityWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostActivity(ctx context.Context, tripId int, body PostActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActivity request
	DeleteActivity(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActivity request
	GetActivity(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutActivityWithBody request with any body
	PutActivityWithBody(ctx context.Context, tripId int, activityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutActivity(ctx context.Context, tripId int, activityId int, body PutActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttachments request
	GetAttachments(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAttachmentWithBody request with any body
	PostAttachmentWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttachment request
	DeleteAttachment(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadAttachment request
	DownloadAttachment(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlights request
	GetFlights(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFlightWithBody request with any body
	PostFlightWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFlight(ctx context.Context, tripId int, body PostFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFlight request
	DeleteFlight(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFlight request
	GetFlight(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFlightWithBody request with any body
	PutFlightWithBody(ctx context.Context, tripId int, flightId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFlight(ctx context.Context, tripId int, flightId int, body PutFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetTrips(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTripsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTripWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTripRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrip(ctx context.Context, body PostTripJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTripRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTrip(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTripRequest(c.Server, tripId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrip(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTripRequest(c.Server, tripId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTripWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTripRequestWithBody(c.Server, tripId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrip(ctx context.Context, tripId int, body PutTripJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTripRequest(c.Server, tripId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAccommodation(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAccommodationRequest(c.Server, tripId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccommodationWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccommodationRequestWithBody(c.Server, tripId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccommodation(ctx context.Context, tripId int, body PostAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccommodationRequest(c.Server, tripId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccommodation(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccommodationRequest(c.Server, tripId, accommodationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccommodationByID(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccommodationByIDRequest(c.Server, tripId, accommodationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccommodationWithBody(ctx context.Context, tripId int, accommodationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccommodationRequestWithBody(c.Server, tripId, accommodationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccommodation(ctx context.Context, tripId int, accommodationId int, body PutAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccommodationRequest(c.Server, tripId, accommodationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivities(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivitiesRequest(c.Server, tripId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivityWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivityRequestWithBody(c.Server, tripId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActivity(ctx context.Context, tripId int, body PostActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActivityRequest(c.Server, tripId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActivity(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActivityRequest(c.Server, tripId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivity(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActivityRequest(c.Server, tripId, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActivityWithBody(ctx context.Context, tripId int, activityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActivityRequestWithBody(c.Server, tripId, activityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActivity(ctx context.Context, tripId int, activityId int, body PutActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActivityRequest(c.Server, tripId, activityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttachments(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttachmentsRequest(c.Server, tripId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentRequestWithBody(c.Server, tripId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttachment(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttachmentRequest(c.Server, tripId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadAttachment(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadAttachmentRequest(c.Server, tripId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlights(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlightsRequest(c.Server, tripId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlightWithBody(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlightRequestWithBody(c.Server, tripId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFlight(ctx context.Context, tripId int, body PostFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFlightRequest(c.Server, tripId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFlight(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFlightRequest(c.Server, tripId, flightId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFlight(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFlightRequest(c.Server, tripId, flightId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlightWithBody(ctx context.Context, tripId int, flightId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlightRequestWithBody(c.Server, tripId, flightId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFlight(ctx context.Context, tripId int, flightId int, body PutFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFlightRequest(c.Server, tripId, flightId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetTripsRequest generates requests for GetTrips
func NewGetTripsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTripRequest calls the generic PostTrip builder with application/json body
func NewPostTripRequest(server string, body PostTripJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTripRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTripRequestWithBody generates requests for PostTrip with any type of body
func NewPostTripRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTripRequest generates requests for DeleteTrip
func NewDeleteTripRequest(server string, tripId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTripRequest generates requests for GetTrip
func NewGetTripRequest(server string, tripId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTripRequest calls the generic PutTrip builder with application/json body
func NewPutTripRequest(server string, tripId int, body PutTripJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTripRequestWithBody(server, tripId, "application/json", bodyReader)
}

// NewPutTripRequestWithBody generates requests for PutTrip with any type of body
func NewPutTripRequestWithBody(server string, tripId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllAccommodationRequest generates requests for GetAllAccommodation
func NewGetAllAccommodationRequest(server string, tripId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/accommodation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAccommodationRequest calls the generic PostAccommodation builder with application/json body
func NewPostAccommodationRequest(server string, tripId int, body PostAccommodationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccommodationRequestWithBody(server, tripId, "application/json", bodyReader)
}

// NewPostAccommodationRequestWithBody generates requests for PostAccommodation with any type of body
func NewPostAccommodationRequestWithBody(server string, tripId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/accommodation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccommodationRequest generates requests for DeleteAccommodation
func NewDeleteAccommodationRequest(server string, tripId int, accommodationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accommodation_id", runtime.ParamLocationPath, accommodationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/accommodation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccommodationByIDRequest generates requests for GetAccommodationByID
func NewGetAccommodationByIDRequest(server string, tripId int, accommodationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accommodation_id", runtime.ParamLocationPath, accommodationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/accommodation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAccommodationRequest calls the generic PutAccommodation builder with application/json body
func NewPutAccommodationRequest(server string, tripId int, accommodationId int, body PutAccommodationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccommodationRequestWithBody(server, tripId, accommodationId, "application/json", bodyReader)
}

// NewPutAccommodationRequestWithBody generates requests for PutAccommodation with any type of body
func NewPutAccommodationRequestWithBody(server string, tripId int, accommodationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accommodation_id", runtime.ParamLocationPath, accommodationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/accommodation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActivitiesRequest generates requests for GetActivities
func NewGetActivitiesRequest(server string, tripId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostActivityRequest calls the generic PostActivity builder with application/json body
func NewPostActivityRequest(server string, tripId int, body PostActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostActivityRequestWithBody(server, tripId, "application/json", bodyReader)
}

// NewPostActivityRequestWithBody generates requests for PostActivity with any type of body
func NewPostActivityRequestWithBody(server string, tripId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/activities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteActivityRequest generates requests for DeleteActivity
func NewDeleteActivityRequest(server string, tripId int, activityId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activity_id", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityRequest generates requests for GetActivity
func NewGetActivityRequest(server string, tripId int, activityId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activity_id", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutActivityRequest calls the generic PutActivity builder with application/json body
func NewPutActivityRequest(server string, tripId int, activityId int, body PutActivityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutActivityRequestWithBody(server, tripId, activityId, "application/json", bodyReader)
}

// NewPutActivityRequestWithBody generates requests for PutActivity with any type of body
func NewPutActivityRequestWithBody(server string, tripId int, activityId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "activity_id", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/activities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAttachmentsRequest generates requests for GetAttachments
func NewGetAttachmentsRequest(server string, tripId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAttachmentRequestWithBody generates requests for PostAttachment with any type of body
func NewPostAttachmentRequestWithBody(server string, tripId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAttachmentRequest generates requests for DeleteAttachment
func NewDeleteAttachmentRequest(server string, tripId int, attachmentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachment_id", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadAttachmentRequest generates requests for DownloadAttachment
func NewDownloadAttachmentRequest(server string, tripId int, attachmentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachment_id", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlightsRequest generates requests for GetFlights
func NewGetFlightsRequest(server string, tripId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/flights", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFlightRequest calls the generic PostFlight builder with application/json body
func NewPostFlightRequest(server string, tripId int, body PostFlightJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFlightRequestWithBody(server, tripId, "application/json", bodyReader)
}

// NewPostFlightRequestWithBody generates requests for PostFlight with any type of body
func NewPostFlightRequestWithBody(server string, tripId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/flights", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFlightRequest generates requests for DeleteFlight
func NewDeleteFlightRequest(server string, tripId int, flightId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flight_id", runtime.ParamLocationPath, flightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/flights/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFlightRequest generates requests for GetFlight
func NewGetFlightRequest(server string, tripId int, flightId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flight_id", runtime.ParamLocationPath, flightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/flights/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFlightRequest calls the generic PutFlight builder with application/json body
func NewPutFlightRequest(server string, tripId int, flightId int, body PutFlightJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFlightRequestWithBody(server, tripId, flightId, "application/json", bodyReader)
}

// NewPutFlightRequestWithBody generates requests for PutFlight with any type of body
func NewPutFlightRequestWithBody(server string, tripId int, flightId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trip_id", runtime.ParamLocationPath, tripId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flight_id", runtime.ParamLocationPath, flightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/trips/%s/flights/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetTripsWithResponse request
	GetTripsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTripsResponse, error)

	// PostTripWithBodyWithResponse request with any body
	PostTripWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTripResponse, error)

	PostTripWithResponse(ctx context.Context, body PostTripJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTripResponse, error)

	// DeleteTripWithResponse request
	DeleteTripWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*DeleteTripResponse, error)

	// GetTripWithResponse request
	GetTripWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetTripResponse, error)

	// PutTripWithBodyWithResponse request with any body
	PutTripWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTripResponse, error)

	PutTripWithResponse(ctx context.Context, tripId int, body PutTripJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTripResponse, error)

	// GetAllAccommodationWithResponse request
	GetAllAccommodationWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetAllAccommodationResponse, error)

	// PostAccommodationWithBodyWithResponse request with any body
	PostAccommodationWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccommodationResponse, error)

	PostAccommodationWithResponse(ctx context.Context, tripId int, body PostAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccommodationResponse, error)

	// DeleteAccommodationWithResponse request
	DeleteAccommodationWithResponse(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*DeleteAccommodationResponse, error)

	// GetAccommodationByIDWithResponse request
	GetAccommodationByIDWithResponse(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*GetAccommodationByIDResponse, error)

	// PutAccommodationWithBodyWithResponse request with any body
	PutAccommodationWithBodyWithResponse(ctx context.Context, tripId int, accommodationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccommodationResponse, error)

	PutAccommodationWithResponse(ctx context.Context, tripId int, accommodationId int, body PutAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccommodationResponse, error)

	// GetActivitiesWithResponse request
	GetActivitiesWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error)

	// PostActivityWithBodyWithResponse request with any body
	PostActivityWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActivityResponse, error)

	PostActivityWithResponse(ctx context.Context, tripId int, body PostActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActivityResponse, error)

	// DeleteActivityWithResponse request
	DeleteActivityWithResponse(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error)

	// GetActivityWithResponse request
	GetActivityWithResponse(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*GetActivityResponse, error)

	// PutActivityWithBodyWithResponse request with any body
	PutActivityWithBodyWithResponse(ctx context.Context, tripId int, activityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActivityResponse, error)

	PutActivityWithResponse(ctx context.Context, tripId int, activityId int, body PutActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*PutActivityResponse, error)

	// GetAttachmentsWithResponse request
	GetAttachmentsWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetAttachmentsResponse, error)

	// PostAttachmentWithBodyWithResponse request with any body
	PostAttachmentWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentResponse, error)

	// DeleteAttachmentWithResponse request
	DeleteAttachmentWithResponse(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*DeleteAttachmentResponse, error)

	// DownloadAttachmentWithResponse request
	DownloadAttachmentWithResponse(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*DownloadAttachmentResponse, error)

	// GetFlightsWithResponse request
	GetFlightsWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetFlightsResponse, error)

	// PostFlightWithBodyWithResponse request with any body
	PostFlightWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlightResponse, error)

	PostFlightWithResponse(ctx context.Context, tripId int, body PostFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlightResponse, error)

	// DeleteFlightWithResponse request
	DeleteFlightWithResponse(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*DeleteFlightResponse, error)

	// GetFlightWithResponse request
	GetFlightWithResponse(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*GetFlightResponse, error)

	// PutFlightWithBodyWithResponse request with any body
	PutFlightWithBodyWithResponse(ctx context.Context, tripId int, flightId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlightResponse, error)

	PutFlightWithResponse(ctx context.Context, tripId int, flightId int, body PutFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlightResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserResponse, error)
}

type GetTripsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityTrip
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetTripsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTripsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTripResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PostTripResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTripResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTripResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteTripResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTripResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTripResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityTrip
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetTripResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTripResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTripResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PutTripResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTripResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAccommodationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityAccommodation
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetAllAccommodationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAccommodationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccommodationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PostAccommodationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccommodationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccommodationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteAccommodationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccommodationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccommodationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityAccommodation
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetAccommodationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccommodationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccommodationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PutAccommodationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccommodationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityActivity
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PostActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityActivity
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PutActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityAttachment
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PostAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityAttachment
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r DownloadAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityFlight
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetFlightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFlightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PostFlightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFlightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFlightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteFlightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFlightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFlightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityFlight
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetFlightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFlightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFlightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r PutFlightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFlightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityUser
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityUser
	JSON500      *ResponseError
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetTripsWithResponse request returning *GetTripsResponse
func (c *ClientWithResponses) GetTripsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTripsResponse, error) {
	rsp, err := c.GetTrips(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTripsResponse(rsp)
}

// PostTripWithBodyWithResponse request with arbitrary body returning *PostTripResponse
func (c *ClientWithResponses) PostTripWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTripResponse, error) {
	rsp, err := c.PostTripWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTripResponse(rsp)
}

func (c *ClientWithResponses) PostTripWithResponse(ctx context.Context, body PostTripJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTripResponse, error) {
	rsp, err := c.PostTrip(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTripResponse(rsp)
}

// DeleteTripWithResponse request returning *DeleteTripResponse
func (c *ClientWithResponses) DeleteTripWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*DeleteTripResponse, error) {
	rsp, err := c.DeleteTrip(ctx, tripId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTripResponse(rsp)
}

// GetTripWithResponse request returning *GetTripResponse
func (c *ClientWithResponses) GetTripWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetTripResponse, error) {
	rsp, err := c.GetTrip(ctx, tripId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTripResponse(rsp)
}

// PutTripWithBodyWithResponse request with arbitrary body returning *PutTripResponse
func (c *ClientWithResponses) PutTripWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTripResponse, error) {
	rsp, err := c.PutTripWithBody(ctx, tripId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTripResponse(rsp)
}

func (c *ClientWithResponses) PutTripWithResponse(ctx context.Context, tripId int, body PutTripJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTripResponse, error) {
	rsp, err := c.PutTrip(ctx, tripId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTripResponse(rsp)
}

// GetAllAccommodationWithResponse request returning *GetAllAccommodationResponse
func (c *ClientWithResponses) GetAllAccommodationWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetAllAccommodationResponse, error) {
	rsp, err := c.GetAllAccommodation(ctx, tripId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAccommodationResponse(rsp)
}

// PostAccommodationWithBodyWithResponse request with arbitrary body returning *PostAccommodationResponse
func (c *ClientWithResponses) PostAccommodationWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccommodationResponse, error) {
	rsp, err := c.PostAccommodationWithBody(ctx, tripId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccommodationResponse(rsp)
}

func (c *ClientWithResponses) PostAccommodationWithResponse(ctx context.Context, tripId int, body PostAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccommodationResponse, error) {
	rsp, err := c.PostAccommodation(ctx, tripId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccommodationResponse(rsp)
}

// DeleteAccommodationWithResponse request returning *DeleteAccommodationResponse
func (c *ClientWithResponses) DeleteAccommodationWithResponse(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*DeleteAccommodationResponse, error) {
	rsp, err := c.DeleteAccommodation(ctx, tripId, accommodationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccommodationResponse(rsp)
}

// GetAccommodationByIDWithResponse request returning *GetAccommodationByIDResponse
func (c *ClientWithResponses) GetAccommodationByIDWithResponse(ctx context.Context, tripId int, accommodationId int, reqEditors ...RequestEditorFn) (*GetAccommodationByIDResponse, error) {
	rsp, err := c.GetAccommodationByID(ctx, tripId, accommodationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccommodationByIDResponse(rsp)
}

// PutAccommodationWithBodyWithResponse request with arbitrary body returning *PutAccommodationResponse
func (c *ClientWithResponses) PutAccommodationWithBodyWithResponse(ctx context.Context, tripId int, accommodationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccommodationResponse, error) {
	rsp, err := c.PutAccommodationWithBody(ctx, tripId, accommodationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccommodationResponse(rsp)
}

func (c *ClientWithResponses) PutAccommodationWithResponse(ctx context.Context, tripId int, accommodationId int, body PutAccommodationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccommodationResponse, error) {
	rsp, err := c.PutAccommodation(ctx, tripId, accommodationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccommodationResponse(rsp)
}

// GetActivitiesWithResponse request returning *GetActivitiesResponse
func (c *ClientWithResponses) GetActivitiesWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetActivitiesResponse, error) {
	rsp, err := c.GetActivities(ctx, tripId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivitiesResponse(rsp)
}

// PostActivityWithBodyWithResponse request with arbitrary body returning *PostActivityResponse
func (c *ClientWithResponses) PostActivityWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActivityResponse, error) {
	rsp, err := c.PostActivityWithBody(ctx, tripId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActivityResponse(rsp)
}

func (c *ClientWithResponses) PostActivityWithResponse(ctx context.Context, tripId int, body PostActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostActivityResponse, error) {
	rsp, err := c.PostActivity(ctx, tripId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActivityResponse(rsp)
}

// DeleteActivityWithResponse request returning *DeleteActivityResponse
func (c *ClientWithResponses) DeleteActivityWithResponse(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*DeleteActivityResponse, error) {
	rsp, err := c.DeleteActivity(ctx, tripId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActivityResponse(rsp)
}

// GetActivityWithResponse request returning *GetActivityResponse
func (c *ClientWithResponses) GetActivityWithResponse(ctx context.Context, tripId int, activityId int, reqEditors ...RequestEditorFn) (*GetActivityResponse, error) {
	rsp, err := c.GetActivity(ctx, tripId, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityResponse(rsp)
}

// PutActivityWithBodyWithResponse request with arbitrary body returning *PutActivityResponse
func (c *ClientWithResponses) PutActivityWithBodyWithResponse(ctx context.Context, tripId int, activityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActivityResponse, error) {
	rsp, err := c.PutActivityWithBody(ctx, tripId, activityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActivityResponse(rsp)
}

func (c *ClientWithResponses) PutActivityWithResponse(ctx context.Context, tripId int, activityId int, body PutActivityJSONRequestBody, reqEditors ...RequestEditorFn) (*PutActivityResponse, error) {
	rsp, err := c.PutActivity(ctx, tripId, activityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActivityResponse(rsp)
}

// GetAttachmentsWithResponse request returning *GetAttachmentsResponse
func (c *ClientWithResponses) GetAttachmentsWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetAttachmentsResponse, error) {
	rsp, err := c.GetAttachments(ctx, tripId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentsResponse(rsp)
}

// PostAttachmentWithBodyWithResponse request with arbitrary body returning *PostAttachmentResponse
func (c *ClientWithResponses) PostAttachmentWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentResponse, error) {
	rsp, err := c.PostAttachmentWithBody(ctx, tripId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentResponse(rsp)
}

// DeleteAttachmentWithResponse request returning *DeleteAttachmentResponse
func (c *ClientWithResponses) DeleteAttachmentWithResponse(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*DeleteAttachmentResponse, error) {
	rsp, err := c.DeleteAttachment(ctx, tripId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttachmentResponse(rsp)
}

// DownloadAttachmentWithResponse request returning *DownloadAttachmentResponse
func (c *ClientWithResponses) DownloadAttachmentWithResponse(ctx context.Context, tripId int, attachmentId int, reqEditors ...RequestEditorFn) (*DownloadAttachmentResponse, error) {
	rsp, err := c.DownloadAttachment(ctx, tripId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadAttachmentResponse(rsp)
}

// GetFlightsWithResponse request returning *GetFlightsResponse
func (c *ClientWithResponses) GetFlightsWithResponse(ctx context.Context, tripId int, reqEditors ...RequestEditorFn) (*GetFlightsResponse, error) {
	rsp, err := c.GetFlights(ctx, tripId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlightsResponse(rsp)
}

// PostFlightWithBodyWithResponse request with arbitrary body returning *PostFlightResponse
func (c *ClientWithResponses) PostFlightWithBodyWithResponse(ctx context.Context, tripId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFlightResponse, error) {
	rsp, err := c.PostFlightWithBody(ctx, tripId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlightResponse(rsp)
}

func (c *ClientWithResponses) PostFlightWithResponse(ctx context.Context, tripId int, body PostFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFlightResponse, error) {
	rsp, err := c.PostFlight(ctx, tripId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFlightResponse(rsp)
}

// DeleteFlightWithResponse request returning *DeleteFlightResponse
func (c *ClientWithResponses) DeleteFlightWithResponse(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*DeleteFlightResponse, error) {
	rsp, err := c.DeleteFlight(ctx, tripId, flightId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFlightResponse(rsp)
}

// GetFlightWithResponse request returning *GetFlightResponse
func (c *ClientWithResponses) GetFlightWithResponse(ctx context.Context, tripId int, flightId int, reqEditors ...RequestEditorFn) (*GetFlightResponse, error) {
	rsp, err := c.GetFlight(ctx, tripId, flightId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFlightResponse(rsp)
}

// PutFlightWithBodyWithResponse request with arbitrary body returning *PutFlightResponse
func (c *ClientWithResponses) PutFlightWithBodyWithResponse(ctx context.Context, tripId int, flightId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFlightResponse, error) {
	rsp, err := c.PutFlightWithBody(ctx, tripId, flightId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlightResponse(rsp)
}

func (c *ClientWithResponses) PutFlightWithResponse(ctx context.Context, tripId int, flightId int, body PutFlightJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFlightResponse, error) {
	rsp, err := c.PutFlight(ctx, tripId, flightId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFlightResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// ParseGetTripsResponse parses an HTTP response from a GetTripsWithResponse call
func ParseGetTripsResponse(rsp *http.Response) (*GetTripsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTripsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityTrip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTripResponse parses an HTTP response from a PostTripWithResponse call
func ParsePostTripResponse(rsp *http.Response) (*PostTripResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTripResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTripResponse parses an HTTP response from a DeleteTripWithResponse call
func ParseDeleteTripResponse(rsp *http.Response) (*DeleteTripResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTripResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTripResponse parses an HTTP response from a GetTripWithResponse call
func ParseGetTripResponse(rsp *http.Response) (*GetTripResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTripResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityTrip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutTripResponse parses an HTTP response from a PutTripWithResponse call
func ParsePutTripResponse(rsp *http.Response) (*PutTripResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTripResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllAccommodationResponse parses an HTTP response from a GetAllAccommodationWithResponse call
func ParseGetAllAccommodationResponse(rsp *http.Response) (*GetAllAccommodationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAccommodationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityAccommodation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAccommodationResponse parses an HTTP response from a PostAccommodationWithResponse call
func ParsePostAccommodationResponse(rsp *http.Response) (*PostAccommodationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccommodationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAccommodationResponse parses an HTTP response from a DeleteAccommodationWithResponse call
func ParseDeleteAccommodationResponse(rsp *http.Response) (*DeleteAccommodationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccommodationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAccommodationByIDResponse parses an HTTP response from a GetAccommodationByIDWithResponse call
func ParseGetAccommodationByIDResponse(rsp *http.Response) (*GetAccommodationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccommodationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityAccommodation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutAccommodationResponse parses an HTTP response from a PutAccommodationWithResponse call
func ParsePutAccommodationResponse(rsp *http.Response) (*PutAccommodationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAccommodationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetActivitiesResponse parses an HTTP response from a GetActivitiesWithResponse call
func ParseGetActivitiesResponse(rsp *http.Response) (*GetActivitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityActivity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostActivityResponse parses an HTTP response from a PostActivityWithResponse call
func ParsePostActivityResponse(rsp *http.Response) (*PostActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteActivityResponse parses an HTTP response from a DeleteActivityWithResponse call
func ParseDeleteActivityResponse(rsp *http.Response) (*DeleteActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetActivityResponse parses an HTTP response from a GetActivityWithResponse call
func ParseGetActivityResponse(rsp *http.Response) (*GetActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityActivity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutActivityResponse parses an HTTP response from a PutActivityWithResponse call
func ParsePutActivityResponse(rsp *http.Response) (*PutActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAttachmentsResponse parses an HTTP response from a GetAttachmentsWithResponse call
func ParseGetAttachmentsResponse(rsp *http.Response) (*GetAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAttachmentResponse parses an HTTP response from a PostAttachmentWithResponse call
func ParsePostAttachmentResponse(rsp *http.Response) (*PostAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAttachmentResponse parses an HTTP response from a DeleteAttachmentWithResponse call
func ParseDeleteAttachmentResponse(rsp *http.Response) (*DeleteAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadAttachmentResponse parses an HTTP response from a DownloadAttachmentWithResponse call
func ParseDownloadAttachmentResponse(rsp *http.Response) (*DownloadAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFlightsResponse parses an HTTP response from a GetFlightsWithResponse call
func ParseGetFlightsResponse(rsp *http.Response) (*GetFlightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityFlight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostFlightResponse parses an HTTP response from a PostFlightWithResponse call
func ParsePostFlightResponse(rsp *http.Response) (*PostFlightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFlightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFlightResponse parses an HTTP response from a DeleteFlightWithResponse call
func ParseDeleteFlightResponse(rsp *http.Response) (*DeleteFlightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFlightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFlightResponse parses an HTTP response from a GetFlightWithResponse call
func ParseGetFlightResponse(rsp *http.Response) (*GetFlightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFlightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityFlight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutFlightResponse parses an HTTP response from a PutFlightWithResponse call
func ParsePutFlightResponse(rsp *http.Response) (*PutFlightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFlightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
