// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	entity "kompass/internal/entity"
	response "kompass/internal/repo/webapi/response"
)

type TrainConverterImpl struct{}

func (c *TrainConverterImpl) ConvertJourney(source response.Journey) (entity.TrainDetail, error) {
	var entityTrainDetail entity.TrainDetail
	entityTrainDetail.RefreshToken = source.RefreshToken
	if source.Legs != nil {
		entityTrainDetail.Legs = make([]entity.TrainLeg, len(source.Legs))
		for i := 0; i < len(source.Legs); i++ {
			entityTrainLeg, err := c.ConvertLeg(source.Legs[i])
			if err != nil {
				return entityTrainDetail, err
			}
			entityTrainDetail.Legs[i] = entityTrainLeg
		}
	}
	return entityTrainDetail, nil
}
func (c *TrainConverterImpl) ConvertLeg(source response.Leg) (entity.TrainLeg, error) {
	var entityTrainLeg entity.TrainLeg
	entityTrainLeg.Origin = c.ConvertStation(source.Origin)
	entityTrainLeg.Destination = c.ConvertStation(source.Destination)
	civilDateTime, err := ParseTimestamp(source.PlannedDeparture)
	if err != nil {
		return entityTrainLeg, err
	}
	entityTrainLeg.DepartureDateTime = civilDateTime
	civilDateTime2, err := ParseTimestamp(source.PlannedArrival)
	if err != nil {
		return entityTrainLeg, err
	}
	entityTrainLeg.ArrivalDateTime = civilDateTime2
	var pString *string
	if source.Line != nil {
		pString = &source.Line.Name
	}
	if pString != nil {
		entityTrainLeg.LineName = *pString
	}
	return entityTrainLeg, nil
}
func (c *TrainConverterImpl) ConvertLocation(source response.Location) entity.Location {
	var entityLocation entity.Location
	entityLocation.Latitude = source.Latitude
	entityLocation.Longitude = source.Longitude
	return entityLocation
}
func (c *TrainConverterImpl) ConvertStation(source response.StationOrStop) entity.TrainStation {
	var entityTrainStation entity.TrainStation
	entityTrainStation.ID = source.ID
	entityTrainStation.Name = source.Name
	entityTrainStation.Location = c.ConvertLocation(source.Location)
	return entityTrainStation
}
