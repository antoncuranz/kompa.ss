// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	entity "kompass/internal/entity"
	sqlc "kompass/pkg/sqlc"
)

type FlightConverterImpl struct{}

func (c *FlightConverterImpl) ConvertFlight(source ConvertFlightParams) entity.Flight {
	var entityFlight entity.Flight
	entityFlight.ID = source.Flight.ID
	entityFlight.TripID = source.Flight.TripID
	entityFlight.Legs = c.ConvertFlightLegs(source.Legs)
	entityFlight.PNRs = c.ConvertPnrs(source.PNRs)
	entityFlight.Price = source.Flight.Price
	return entityFlight
}
func (c *FlightConverterImpl) ConvertFlightLegs(source []sqlc.GetFlightLegsByFlightIDRow) []entity.FlightLeg {
	var entityFlightLegList []entity.FlightLeg
	if source != nil {
		entityFlightLegList = make([]entity.FlightLeg, len(source))
		for i := 0; i < len(source); i++ {
			entityFlightLegList[i] = ConvertFlightLeg(c, source[i])
		}
	}
	return entityFlightLegList
}
func (c *FlightConverterImpl) ConvertLocation(source sqlc.Location) entity.Location {
	var entityLocation entity.Location
	entityLocation.ID = source.ID
	entityLocation.Latitude = source.Latitude
	entityLocation.Longitude = source.Longitude
	return entityLocation
}
func (c *FlightConverterImpl) ConvertPnr(source sqlc.Pnr) entity.PNR {
	var entityPNR entity.PNR
	entityPNR.ID = source.ID
	entityPNR.Airline = source.Airline
	entityPNR.PNR = source.Pnr
	return entityPNR
}
func (c *FlightConverterImpl) ConvertPnrs(source []sqlc.Pnr) []entity.PNR {
	var entityPNRList []entity.PNR
	if source != nil {
		entityPNRList = make([]entity.PNR, len(source))
		for i := 0; i < len(source); i++ {
			entityPNRList[i] = c.ConvertPnr(source[i])
		}
	}
	return entityPNRList
}
