// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	civil "cloud.google.com/go/civil"
	entity "kompass/internal/entity"
	sqlc "kompass/pkg/sqlc"
)

type FlightConverterImpl struct{}

func (c *FlightConverterImpl) ConvertFlightLegs(source []sqlc.GetFlightLegsByTransportationIDRow) []entity.FlightLeg {
	var entityFlightLegList []entity.FlightLeg
	if source != nil {
		entityFlightLegList = make([]entity.FlightLeg, len(source))
		for i := 0; i < len(source); i++ {
			entityFlightLegList[i] = ConvertFlightLeg(c, source[i])
		}
	}
	return entityFlightLegList
}
func (c *FlightConverterImpl) ConvertLocation(source sqlc.Location) entity.Location {
	var entityLocation entity.Location
	entityLocation.ID = source.ID
	entityLocation.Latitude = source.Latitude
	entityLocation.Longitude = source.Longitude
	return entityLocation
}
func (c *FlightConverterImpl) ConvertPnr(source sqlc.FlightPnr) entity.PNR {
	var entityPNR entity.PNR
	entityPNR.ID = source.ID
	entityPNR.Airline = source.Airline
	entityPNR.PNR = source.Pnr
	return entityPNR
}
func (c *FlightConverterImpl) ConvertPnrs(source []sqlc.FlightPnr) []entity.PNR {
	var entityPNRList []entity.PNR
	if source != nil {
		entityPNRList = make([]entity.PNR, len(source))
		for i := 0; i < len(source); i++ {
			entityPNRList[i] = c.ConvertPnr(source[i])
		}
	}
	return entityPNRList
}

type TrainConverterImpl struct{}

func (c *TrainConverterImpl) ConvertLocation(source sqlc.Location) entity.Location {
	var entityLocation entity.Location
	entityLocation.ID = source.ID
	entityLocation.Latitude = source.Latitude
	entityLocation.Longitude = source.Longitude
	return entityLocation
}
func (c *TrainConverterImpl) ConvertTrainLegs(source []sqlc.GetTrainLegsByTransportationIDRow) []entity.TrainLeg {
	var entityTrainLegList []entity.TrainLeg
	if source != nil {
		entityTrainLegList = make([]entity.TrainLeg, len(source))
		for i := 0; i < len(source); i++ {
			entityTrainLegList[i] = ConvertTrainLeg(c, source[i])
		}
	}
	return entityTrainLegList
}

type TransportationConverterImpl struct{}

func (c *TransportationConverterImpl) ConvertTransportation(source ConvertTransportationParams) entity.Transportation {
	var entityTransportation entity.Transportation
	entityTransportation.ID = source.Transportation.ID
	entityTransportation.TripID = source.Transportation.TripID
	entityTransportation.Type = entity.TransportationType(source.Transportation.Type)
	entityTransportation.Origin = c.sqlcLocationToEntityLocation(source.Origin)
	entityTransportation.Destination = c.sqlcLocationToEntityLocation(source.Destination)
	entityTransportation.DepartureDateTime = c.civilDateTimeToCivilDateTime(source.Transportation.DepartureTime)
	entityTransportation.ArrivalDateTime = c.civilDateTimeToCivilDateTime(source.Transportation.ArrivalTime)
	entityTransportation.Price = source.Transportation.Price
	return entityTransportation
}
func (c *TransportationConverterImpl) civilDateTimeToCivilDateTime(source civil.DateTime) civil.DateTime {
	return source
}
func (c *TransportationConverterImpl) sqlcLocationToEntityLocation(source sqlc.Location) entity.Location {
	var entityLocation entity.Location
	entityLocation.ID = source.ID
	entityLocation.Latitude = source.Latitude
	entityLocation.Longitude = source.Longitude
	return entityLocation
}
